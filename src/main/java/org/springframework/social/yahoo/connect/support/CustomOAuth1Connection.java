/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.social.yahoo.connect.support;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.social.connect.ApiAdapter;
import org.springframework.social.connect.ConnectionData;
import org.springframework.social.connect.support.AbstractConnection;
import org.springframework.social.oauth1.OAuth1ServiceProvider;
import org.springframework.social.oauth1.CustomOAuth1Template;
import org.springframework.util.MultiValueMap;

public class CustomOAuth1Connection<A> extends AbstractConnection<A> {

	private static final long serialVersionUID = -808097401993144389L;
	Logger logger = LoggerFactory.getLogger(CustomOAuth1Connection.class);
	private transient final OAuth1ServiceProvider<A> serviceProvider;
	private String consumerKey;
	private String accessToken;
	
	private String secret;

	private String refreshToken;
	
	private Long expireTime;
	
	private transient A api;
	public CustomOAuth1Connection(String consumerKey, String providerId, String providerUserId, String accessToken, String secret, String refreshToken, Long expireTime, OAuth1ServiceProvider<A> serviceProvider, ApiAdapter<A> apiAdapter) {
		super(apiAdapter);
		this.serviceProvider = serviceProvider;
		initAccessTokens(accessToken, secret, refreshToken, expireTime, consumerKey);
		initApi();
		initKey(providerId, providerUserId);
		
	}


	public CustomOAuth1Connection(String consumerKey, ConnectionData data, OAuth1ServiceProvider<A> serviceProvider, ApiAdapter<A> apiAdapter) {
		super(data, apiAdapter);
		this.serviceProvider = serviceProvider;
		initAccessTokens(data.getAccessToken(), data.getSecret(), data.getRefreshToken(), data.getExpireTime(), consumerKey);
		initApi();
	}



	// implementing Connection
	
	public A getApi() {
		return api;
	}

	public ConnectionData createData() {
		synchronized (getMonitor()) {
			return new ConnectionData(getKey().getProviderId(), getKey().getProviderUserId(), getDisplayName(), getProfileUrl(), getImageUrl(), accessToken, secret, refreshToken, expireTime);
		}
	}
	
	@Override
	public boolean hasExpired() {
		synchronized (getMonitor()) {
			return expireTime != null && System.currentTimeMillis() >= (expireTime * 1000);
		}
	}
	
	@Override
	public void refresh() {
		synchronized (getMonitor()) {
			ConnectionData data = createData();
			//if(data.getProviderId().equals("yahoo")) {
				String callBack = "";
				CustomOAuth1Template customOAuth1Template = (CustomOAuth1Template) serviceProvider.getOAuthOperations();
				MultiValueMap<String, String> response = customOAuth1Template.fetchYahooRefreshAccessToken(callBack, null, data.getSecret(), data.getAccessToken(), data.getRefreshToken());

				String accessTokenValue = response.getFirst("oauth_token");
				String accessTokenSecret = response.getFirst("oauth_token_secret");
				String refreshToken = response.getFirst("oauth_session_handle");
				Long expireTime = new Long(response.getFirst("oauth_expires_in"));

				initAccessTokens(accessTokenValue, accessTokenSecret, refreshToken, expireTime, consumerKey);

				initApi();
			//}
		}
	}
	

	
	private void initAccessTokens(String accessToken, String secret, String refreshToken, Long expireTime, String consumerKey) {
		this.accessToken = accessToken;
		this.secret = secret;
		this.refreshToken = refreshToken;
		this.expireTime = expireTime;
		this.consumerKey = consumerKey;
	}

	private void initApi() {
		api = serviceProvider.getApi(accessToken, secret);
	}

	// equals() and hashCode() generated by Eclipse
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((accessToken == null) ? 0 : accessToken.hashCode());
		result = prime * result + ((secret == null) ? 0 : secret.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (!super.equals(obj)) return false;
		if (getClass() != obj.getClass()) return false;
		@SuppressWarnings("rawtypes")
		CustomOAuth1Connection other = (CustomOAuth1Connection) obj;
		
		if (accessToken == null) {
			if (other.accessToken != null) return false;
		} else if (!accessToken.equals(other.accessToken)) return false;

		if (secret == null) {
			if (other.secret != null) return false;
		} else if (!secret.equals(other.secret)) return false;
		
		return true;
	}
	

}
